// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.Models;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(SWP391GHSMContext))]
    partial class SWP391GHSMContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Repository.Models.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("blogId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("BlogId"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("authorId");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.HasKey("BlogId")
                        .HasName("PK__Blog__FA0AA72DDB9CF1CE");

                    b.HasIndex("AuthorId");

                    b.ToTable("Blog", (string)null);
                });

            modelBuilder.Entity("Repository.Models.Consultant", b =>
                {
                    b.Property<int>("ConsultantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("consultantId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ConsultantId"));

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("avatar");

                    b.Property<string>("Bio")
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<string>("Degree")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("degree");

                    b.Property<int?>("ExperienceYears")
                        .HasColumnType("int")
                        .HasColumnName("experienceYears");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("ConsultantId")
                        .HasName("PK__Consulta__8E3CA2FFC9DB1BDD");

                    b.HasIndex("UserId");

                    b.ToTable("Consultants");
                });

            modelBuilder.Entity("Repository.Models.ConsultantUserSchedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("scheduleId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ScheduleId"));

                    b.Property<int>("ConsultantId")
                        .HasColumnType("int")
                        .HasColumnName("consultantId");

                    b.Property<int?>("ConsultationBookingId")
                        .HasColumnType("int")
                        .HasColumnName("consultationBookingId");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DurationMinutes")
                        .HasColumnType("int")
                        .HasColumnName("durationMinutes");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateTime>("ScheduleDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("scheduleDateTime");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("PENDING")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("ScheduleId")
                        .HasName("PK__Consulta__A532EDD40C1E81DA");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("ConsultationBookingId");

                    b.HasIndex("UserId");

                    b.ToTable("ConsultantUserSchedule", (string)null);
                });

            modelBuilder.Entity("Repository.Models.ConsultationBooking", b =>
                {
                    b.Property<int>("ConsultationBookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("consultationBookingId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ConsultationBookingId"));

                    b.Property<int>("ConsultantId")
                        .HasColumnType("int")
                        .HasColumnName("consultantId");

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("datetime")
                        .HasColumnName("datetime");

                    b.Property<string>("LinkConsultation")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("linkConsultation");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("PENDING")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("ConsultationBookingId")
                        .HasName("PK__Consulta__3CF475EF4110D062");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("UserId");

                    b.ToTable("ConsultationBookings");
                });

            modelBuilder.Entity("Repository.Models.Ewallet", b =>
                {
                    b.Property<int>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("walletId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("WalletId"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("balance");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("isActive");

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("lastUpdated")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("WalletId")
                        .HasName("PK__EWallet__3785C8706628DB04");

                    b.HasIndex("UserId");

                    b.ToTable("EWallet", (string)null);
                });

            modelBuilder.Entity("Repository.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("feedbackId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<int?>("ConsultationBookingId")
                        .HasColumnType("int")
                        .HasColumnName("consultationBookingId");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<int?>("TestBookingId")
                        .HasColumnType("int")
                        .HasColumnName("testBookingId");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("FeedbackId")
                        .HasName("PK__Feedback__2613FD24497B16D8");

                    b.HasIndex("ConsultationBookingId");

                    b.HasIndex("TestBookingId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("Repository.Models.MenstrualCycle", b =>
                {
                    b.Property<int>("CyclesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cyclesId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CyclesId"));

                    b.Property<int>("AverageLength")
                        .HasColumnType("int")
                        .HasColumnName("averageLength");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("endDate");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("startDate");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("CyclesId")
                        .HasName("PK__Menstrua__674DB3A53DEAC6F0");

                    b.HasIndex("UserId");

                    b.ToTable("MenstrualCycles");
                });

            modelBuilder.Entity("Repository.Models.OvulationReminder", b =>
                {
                    b.Property<int>("ReminderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("reminderId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ReminderId"));

                    b.Property<int?>("CycleDay")
                        .HasColumnType("int")
                        .HasColumnName("cycleDay");

                    b.Property<int>("CyclesId")
                        .HasColumnType("int")
                        .HasColumnName("cyclesId");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("note");

                    b.Property<DateOnly>("ReminderDate")
                        .HasColumnType("date")
                        .HasColumnName("reminderDate");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("ReminderId")
                        .HasName("PK__Ovulatio__09DAAAE3D191ACC6");

                    b.HasIndex("CyclesId");

                    b.HasIndex("UserId");

                    b.ToTable("OvulationReminders");
                });

            modelBuilder.Entity("Repository.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("paymentId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("amount");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("method");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("PENDING")
                        .HasColumnName("status");

                    b.Property<DateTime?>("TransactionTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("transactionTime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("WalletId")
                        .HasColumnType("int")
                        .HasColumnName("walletId");

                    b.HasKey("PaymentId")
                        .HasName("PK__Payment__A0D9EFC6AFC573D8");

                    b.HasIndex("WalletId");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("Repository.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("questionId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<string>("AnswerText")
                        .HasColumnType("text")
                        .HasColumnName("answerText");

                    b.Property<int>("ConsultantId")
                        .HasColumnType("int")
                        .HasColumnName("consultantId");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("questionText");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("QuestionId")
                        .HasName("PK__Question__6238D4B24EC4960E");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("UserId");

                    b.ToTable("Question", (string)null);
                });

            modelBuilder.Entity("Repository.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("roleId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("roleName");

                    b.HasKey("RoleId")
                        .HasName("PK__Role__CD98462A27AA16B3");

                    b.HasIndex(new[] { "RoleName" }, "UQ__Role__B194786163687C5D")
                        .IsUnique();

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Repository.Models.Test", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("testId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TestId"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.HasKey("TestId")
                        .HasName("PK__Test__A29BFB884D3AEFD4");

                    b.ToTable("Test", (string)null);
                });

            modelBuilder.Entity("Repository.Models.TestBooking", b =>
                {
                    b.Property<int>("TestBookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("testBookingId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TestBookingId"));

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("int")
                        .HasColumnName("scheduleId");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime")
                        .HasColumnName("scheduledDate");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("PENDING")
                        .HasColumnName("status");

                    b.Property<int>("TestId")
                        .HasColumnType("int")
                        .HasColumnName("testId");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("TestBookingId")
                        .HasName("PK__TestBook__383DA4EDBF983367");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("TestBooking", (string)null);
                });

            modelBuilder.Entity("Repository.Models.TestResult", b =>
                {
                    b.Property<int>("ResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("resultId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ResultId"));

                    b.Property<string>("DiagnosticResults")
                        .HasColumnType("text")
                        .HasColumnName("diagnosticResults");

                    b.Property<string>("TestBlood")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("testBlood");

                    b.Property<int>("TestId")
                        .HasColumnType("int")
                        .HasColumnName("testId");

                    b.Property<string>("TestSample")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("testSample");

                    b.Property<string>("TestUrine")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("testUrine");

                    b.Property<string>("TypeStis")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("typeSTIs");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("ResultId")
                        .HasName("PK__TestResu__C6EADC5BDFFF7F8A");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("TestResult", (string)null);
                });

            modelBuilder.Entity("Repository.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("avatar");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("fullName");

                    b.Property<string>("Gender")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("gender");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("isActive");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("passwordHash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phoneNumber");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("roleId");

                    b.HasKey("UserId")
                        .HasName("PK__User__CB9A1CFF1AE0AA8E");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "UQ__User__AB6E6164CB87A5AA")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Repository.Models.UserMessage", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("messageId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int")
                        .HasColumnName("receiverId");

                    b.Property<int>("SenderId")
                        .HasColumnType("int")
                        .HasColumnName("senderId");

                    b.Property<DateTime?>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("sentAt")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("MessageId")
                        .HasName("PK__UserMess__4808B993AFBF9899");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("UserMessage", (string)null);
                });

            modelBuilder.Entity("Repository.Models.Blog", b =>
                {
                    b.HasOne("Repository.Models.User", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("FK__Blog__authorId__6477ECF3");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Repository.Models.Consultant", b =>
                {
                    b.HasOne("Repository.Models.User", "User")
                        .WithMany("Consultants")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Consultan__userI__656C112C");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Models.ConsultantUserSchedule", b =>
                {
                    b.HasOne("Repository.Models.Consultant", "Consultant")
                        .WithMany("ConsultantUserSchedules")
                        .HasForeignKey("ConsultantId")
                        .IsRequired()
                        .HasConstraintName("FK__Consultan__consu__66603565");

                    b.HasOne("Repository.Models.ConsultationBooking", "ConsultationBooking")
                        .WithMany("ConsultantUserSchedules")
                        .HasForeignKey("ConsultationBookingId")
                        .HasConstraintName("FK__Consultan__consu__6754599E");

                    b.HasOne("Repository.Models.User", "User")
                        .WithMany("ConsultantUserSchedules")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Consultan__userI__68487DD7");

                    b.Navigation("Consultant");

                    b.Navigation("ConsultationBooking");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Models.ConsultationBooking", b =>
                {
                    b.HasOne("Repository.Models.Consultant", "Consultant")
                        .WithMany("ConsultationBookings")
                        .HasForeignKey("ConsultantId")
                        .IsRequired()
                        .HasConstraintName("FK__Consultat__consu__693CA210");

                    b.HasOne("Repository.Models.User", "User")
                        .WithMany("ConsultationBookings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Consultat__userI__6A30C649");

                    b.Navigation("Consultant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Models.Ewallet", b =>
                {
                    b.HasOne("Repository.Models.User", "User")
                        .WithMany("Ewallets")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_EWallet_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Models.Feedback", b =>
                {
                    b.HasOne("Repository.Models.ConsultationBooking", "ConsultationBooking")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ConsultationBookingId")
                        .HasConstraintName("FK__Feedback__consul__6C190EBB");

                    b.HasOne("Repository.Models.TestBooking", "TestBooking")
                        .WithMany("Feedbacks")
                        .HasForeignKey("TestBookingId")
                        .HasConstraintName("FK__Feedback__testBo__6D0D32F4");

                    b.HasOne("Repository.Models.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Feedback__userId__6E01572D");

                    b.Navigation("ConsultationBooking");

                    b.Navigation("TestBooking");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Models.MenstrualCycle", b =>
                {
                    b.HasOne("Repository.Models.User", "User")
                        .WithMany("MenstrualCycles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MenstrualCycles_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Models.OvulationReminder", b =>
                {
                    b.HasOne("Repository.Models.MenstrualCycle", "Cycles")
                        .WithMany("OvulationReminders")
                        .HasForeignKey("CyclesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OvulationReminders_Cycles");

                    b.HasOne("Repository.Models.User", "User")
                        .WithMany("OvulationReminders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_OvulationReminders_User");

                    b.Navigation("Cycles");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Models.Payment", b =>
                {
                    b.HasOne("Repository.Models.Ewallet", "Wallet")
                        .WithMany("Payments")
                        .HasForeignKey("WalletId")
                        .HasConstraintName("FK_Payment_EWallet");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Repository.Models.Question", b =>
                {
                    b.HasOne("Repository.Models.Consultant", "Consultant")
                        .WithMany("Questions")
                        .HasForeignKey("ConsultantId")
                        .IsRequired()
                        .HasConstraintName("FK__Question__consul__72C60C4A");

                    b.HasOne("Repository.Models.User", "User")
                        .WithMany("Questions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Question__userId__73BA3083");

                    b.Navigation("Consultant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Models.TestBooking", b =>
                {
                    b.HasOne("Repository.Models.ConsultantUserSchedule", "Schedule")
                        .WithMany("TestBookings")
                        .HasForeignKey("ScheduleId")
                        .HasConstraintName("FK_TestBooking_Schedule");

                    b.HasOne("Repository.Models.Test", "Test")
                        .WithMany("TestBookings")
                        .HasForeignKey("TestId")
                        .IsRequired()
                        .HasConstraintName("FK__TestBooki__testI__74AE54BC");

                    b.HasOne("Repository.Models.User", "User")
                        .WithMany("TestBookings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__TestBooki__userI__75A278F5");

                    b.Navigation("Schedule");

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Models.TestResult", b =>
                {
                    b.HasOne("Repository.Models.Test", "Test")
                        .WithMany("TestResults")
                        .HasForeignKey("TestId")
                        .IsRequired()
                        .HasConstraintName("FK__TestResul__testI__778AC167");

                    b.HasOne("Repository.Models.User", "User")
                        .WithMany("TestResults")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__TestResul__userI__787EE5A0");

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Models.User", b =>
                {
                    b.HasOne("Repository.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__User__roleId__797309D9");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Repository.Models.UserMessage", b =>
                {
                    b.HasOne("Repository.Models.User", "Receiver")
                        .WithMany("UserMessageReceivers")
                        .HasForeignKey("ReceiverId")
                        .IsRequired()
                        .HasConstraintName("FK__UserMessa__recei__7A672E12");

                    b.HasOne("Repository.Models.User", "Sender")
                        .WithMany("UserMessageSenders")
                        .HasForeignKey("SenderId")
                        .IsRequired()
                        .HasConstraintName("FK__UserMessa__sende__7B5B524B");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Repository.Models.Consultant", b =>
                {
                    b.Navigation("ConsultantUserSchedules");

                    b.Navigation("ConsultationBookings");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Repository.Models.ConsultantUserSchedule", b =>
                {
                    b.Navigation("TestBookings");
                });

            modelBuilder.Entity("Repository.Models.ConsultationBooking", b =>
                {
                    b.Navigation("ConsultantUserSchedules");

                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Repository.Models.Ewallet", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Repository.Models.MenstrualCycle", b =>
                {
                    b.Navigation("OvulationReminders");
                });

            modelBuilder.Entity("Repository.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Repository.Models.Test", b =>
                {
                    b.Navigation("TestBookings");

                    b.Navigation("TestResults");
                });

            modelBuilder.Entity("Repository.Models.TestBooking", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Repository.Models.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("ConsultantUserSchedules");

                    b.Navigation("Consultants");

                    b.Navigation("ConsultationBookings");

                    b.Navigation("Ewallets");

                    b.Navigation("Feedbacks");

                    b.Navigation("MenstrualCycles");

                    b.Navigation("OvulationReminders");

                    b.Navigation("Questions");

                    b.Navigation("TestBookings");

                    b.Navigation("TestResults");

                    b.Navigation("UserMessageReceivers");

                    b.Navigation("UserMessageSenders");
                });
#pragma warning restore 612, 618
        }
    }
}
